--
--    ckv
--
--  an audio language based on Lua,
--       inspired by ChucK
--
-- INSTALL:
-- 
--   Dependencies:
--    LUA: download, build, and "make install"
--      http://www.lua.org/
-- 
--    RTAUDIO: download, build, then
--             copy librtaudio.a to /usr/local/lib/
--                  RtAudio.h    to /usr/local/include/
--                  RtError.h    to /usr/local/include/
--      http://www.music.mcgill.ca/~gary/rtaudio/
--
--    FFMPEG: download, build, and "make install"
--      http://ffmpeg.org/
-- 
--   ckv:
--     $ make
--     $ ./ckv -h

-- EXECUTABLE SUMMARY (run this file)

-- create unit generators in ckv!
-- OOP in Lua is kind of weird, but simple:
--   http://lua-users.org/wiki/ObjectOrientedProgramming
Noise = {
  new = function(class, gain)
    return UGen.initialize_io({
      gain = gain or 1.0,
      last_value = 0.0,
      tick = function(self)
        if not(now() == self.last_tick) then
          self.last_value = (math.random() * 2.0 - 1.0) * self.gain;
          self.last_tick = now();
        end
        return self.last_value
      end
    })
  end
}

ev = Event:new();

function waiter1(name)
  while yield(ev) do
    print("take that, " .. name .. string.rep("!", math.random(1, 10)))
  end
end

-- fork(function, arg1, arg2, ...)
fork(waiter1, "user");

-- Lua allows anonymous functions
fork(function()
  while yield(ev) do
    local ugens = { "Noise:new()", "SinOsc:new()" };
    local which = ugens[math.random(1, 2)];
    
    -- fork_eval(str) executes a string as Lua code!
    fork_eval("local n = " .. which .. ";"
           .. "connect(n, dac);"
           .. "yield(sample_rate / 2);"
           .. "disconnect(n, dac);");
  end
end)

global.nb = "to share between script files, put stuff in global!";
print(global.nb .. " and try \"ckv -h\" sometime!");

while true do
  yield(math.random() * sample_rate * 4 + 1);
  ev:broadcast();
end

-- what's missing:
--  audio filters (make some!)
--  multi-channel audio
--  mic in (this will be easy to add)
--  wav in/out (you could make your own, see the -a option)
--  LuaJIT would be incredible, but ckv and deps need to be 32-bit
--  other stuff
